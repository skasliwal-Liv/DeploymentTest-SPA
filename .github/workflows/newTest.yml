name: Pull-Request-Created-fakeapi
on: 
  workflow_dispatch:
 
env:
  APP_NAME: myfirstspa
  ACR_HELM_REPO_NAME: helm/apptemplate
  ACR_HELM_CHART_NAME: apptemplate
  AKS_NAME: aksclusterdemo
  HOST_URL: pr-review.liventuspoc.com
jobs:
  build:
    name: Spin_Preview_Environment
    #if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
     # checkout the repo
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v2
    - name: 'generate version tags'
      id: vars
      run: |
         url_tag_suffix=${{ github.event.number }}
         if [ -z "${url_tag_suffix}" ]; then
         url_tag_suffix=$(git rev-parse --short=7 ${{ github.sha }})
         fi
         echo ::set-output name=url_tag::pr-${{ env.APP_NAME }}-${url_tag_suffix}
         echo ::set-output name=pr_url::pr-${{ env.APP_NAME }}-${url_tag_suffix}.${{env.HOST_URL}}
         echo  URL TAG Suffix -${url_tag_suffix}
    - name: 'echo version tags'
      id: echovars
      run: |
         echo  URL TAG -${{steps.vars.outputs.url_tag}}
         echo  PR URL-${{steps.vars.outputs.pr_url}}
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: Pull HELM chart
      run: |
         export HELM_EXPERIMENTAL_OCI=1
          # Helm Login to ACR
         echo '${{ secrets.REGISTRY_PASSWORD }}' | helm registry login ${{ secrets.REGISTRY_LOGIN_SERVER }} --username ${{ secrets.REGISTRY_USERNAME }} --password-stdin 
         helm chart pull ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_HELM_REPO_NAME }}:latest
         helm chart export ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ env.ACR_HELM_REPO_NAME }}:latest
    
    - name: Login to AKS
      run: |
          az aks get-credentials -n ${{ env.AKS_NAME }} -g ${{ secrets.RESOURCE_GROUP }} --admin

    - name: publish Fake API to AKS
      run: |
          cd fake-backend
          kubectl create namespace ${{ steps.vars.outputs.url_tag }}
          kubectl create configmap json-server-db-config --from-file=db.json -n ${{ steps.vars.outputs.url_tag }}
          kubectl create configmap json-server-route-config --from-file=route.json -n ${{ steps.vars.outputs.url_tag }}
          sed "s/--REGISTRY_LOGIN_SERVER--/${{ secrets.REGISTRY_LOGIN_SERVER }}/g; s/--ROOT_URL--/${{ steps.vars.outputs.pr_url }}/g" values.yaml
          echo "$(<values.yaml)"

   
   



